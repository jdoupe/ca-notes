mkdir cavault
cd cavault

cat > vault.hcl <<HCL
disable_mlock  = true

listener "tcp" {
  address = "0.0.0.0:8200"
  tls_disable = 1
}

backend "file" {
  path = "/vagrant/cavault/secrets"
}
HCL

../vault server -config=vault.hcl
OR ../vault server -dev
# -dev creates an unsealed vault

export VAULT_ADDR='http://127.0.0.1:8200'

./vault init -key-shares=1 -key-threshold=1

vault auth
OR export VAULT_TOKEN=62fd6843-0156-fd86-e6fe-2b292f8c9270

curl -k -X GET ${VAULT_ADDR}/v1/sys/health

#Create Root CA
#Mount it
./vault mount -path=myca -description='My Root CA' -max-lease-ttl=87600h pki

OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d '{"type": "pki",   "description": "My Root CA", "config": { "max_lease_ttl":     "87600h"}}'  ${VAULT_ADDR}/v1/sys/mounts/myca

#Have a looksee
./vault mounts

OR curl -k -X GET -H "x-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/sys/mounts|jq .

#Create Root CA Cert
vault write myca/root/generate/internal \
> common_name="My Root CA" \
> ttl=87600h \
> key_bits=4096 \
> exclude_cn_from_sans=true

OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d '{"common_name": "My Root CA", "ttl": "87600h", "key_bits": "4096", "exclude_cn_from_sans": "true"}' ${VAULT_ADDR}/v1/myca/root/generate/internal

#Take a look
curl -s http://localhost:8200/v1/myca/ca/pem | openssl x509 -text

vault write myca/config/urls issuing_certificates="http://localhost:8200/v1/myca"
OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d '{ "issuing_certificates": "http://localhost:8200/v1/myca" }' ${VAULT_ADDR}/v1/myca/config/urls

#Create Intermediate CA
vault mount -path=myca_ops -description="My CA Ops Intermediate CA" -max-lease-ttl=26280h pki
OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d '{"type": "pki",   "description": "My CA Ops Intermediate CA", "config": { "max_lease_ttl":     "26280h"}}'  ${VAULT_ADDR}/v1/sys/mounts/myca_ops

./vault mounts
OR curl -k -X GET -H "x-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/sys/mounts|jq .

# Generate CSR
./vault write myca_ops/intermediate/generate/internal \
> common_name="My CA Ops Intermediate CA" \
> ttl=26280h \
> key_bits=4096 \
> exclude_cn_from_sans=true

OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d '{"common_name": "My CA Ops Intermediate CA", "ttl": "26280h", "key_bits": "4096", "exclude_cn_from_sans": "true"}' ${VAULT_ADDR}/v1/myca_ops/intermediate/generate/internal | tee >(jq -r .data.csr > myca_intermediate_ca.csr)

./vault write myca/root/sign-intermediate \
> csr=@myca_intermediate_ca.csr \
> common_name="My CA Ops Intermediate CA" \
> ttl=8760h

OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d @<(jq -n --arg a "$(<myca_intermediate_ca.csr)" '{"csr": $a, "common_name": "My CA Ops Intermediate CA", "ttl": "8760h", "key_bits": "4096"}') ${VAULT_ADDR}/v1/myca/root/sign-intermediate | tee >(jq -r .data.certificate > myca_intermediate_ca.crt)

#That spits out the certificate... need to write it into place.
curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d @<(jq -n --arg a "$(<myca_intermediate_ca.crt)" '{"certificate": $a}') ${VAULT_ADDR}/v1/myca_ops/intermediate/set-signed

#Create role (template?) for certificates
vault write myca_ops/roles/web_server \
key_bits=2048 \
max_ttl=8760h \
allow_any_name=true

OR curl -k -X POST -H "x-Vault-Token: ${VAULT_TOKEN}" -d '{"allow_any_name": "true", "allow_ip_sans": "true", "max_ttl": "8760h", "key_bits": "2048"}' ${VAULT_ADDR}/v1/myca_ops/roles/web_server

#Issue cert - 30 days?
vault write myca_ops/issue/web_server \
common_name='www.example.com' \
ip_sans='1.2.3.4' \
ttl=720h \
format=pem

OR curl -H "X-Vault-Token: ${VAULT_TOKEN}"   -d '{ "common_name": "www.example.com" }' \
${VAULT_ADDR}/v1/myca_ops/issue/web_server \
| tee \
>(jq -r .data.certificate > www.example.com.cert) \
>(jq -r .data.private_key > www.example.com.pem) \
>(jq -r .data.ca_chain[] > www.example.com-chained.pem)

OR if you have a CSR from someone (haven't tested this)
curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d @<(jq -n --arg a "www.example.com" --arg b "$(<server.csr)" '{ common_name: $a, csr: $b }') ${VAULT_ADDR}/v1/myca_ops/sign/example-dot-com \
| tee \
>(jq -r .data.certificate > www.example.com.cert) \
>(jq -r .data.ca_chain[] > www.example.com-chained.pem)

