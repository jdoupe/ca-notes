
VAULT=../vault
ROOT_CA_PATH=myca
ROOT_CA_CN='My Root CA'
INTERMEDIATE_CA_PATH=myca_ops
INTERMEDIATE_CA_CN='My CA Ops Intermediate CA'

mkdir cavault
cd cavault

#cat > vault.hcl <<HCL
#disable_mlock  = true
#
#listener "tcp" {
#  address = "0.0.0.0:8200"
#  tls_disable = 1
#}
#
#backend "file" {
#  path = "/vagrant/cavault/secrets"
#}
#HCL

${VAULT} server -dev > vault-info.txt &
# -dev creates an unsealed, in memory vault
#${VAULT} server -config=vault.hcl
#${VAULT} init -key-shares=1 -key-threshold=1

${VAULT} auth
#OR export VAULT_TOKEN=62fd6843-0156-fd86-e6fe-2b292f8c9270

export VAULT_ADDR='http://127.0.0.1:8200'

${VAULT} status
curl -k -X GET ${VAULT_ADDR}/v1/sys/health

#Create Root CA
#Mount it
${VAULT} mount -path=${ROOT_CA_PATH} -description="${ROOT_CA_CN}" -max-lease-ttl=87600h pki

#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"type": "pki",   "description": "${ROOT_CA_CN}", "config": { "max_lease_ttl":     "87600h"}}'  ${VAULT_ADDR}/v1/sys/mounts/${ROOT_CA_PATH}

#Have a looksee
${VAULT} mounts

#OR curl -k -X GET -H "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/sys/mounts|jq .

#Create Root CA Cert
${VAULT} write ${ROOT_CA_PATH}/root/generate/internal \
 common_name="${ROOT_CA_CN}" \
 ttl=87600h \
 key_bits=4096 \
 exclude_cn_from_sans=true

#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"common_name": "${ROOT_CA_CN}", "ttl": "87600h", "key_bits": "4096", "exclude_cn_from_sans": "true"}' ${VAULT_ADDR}/v1/${ROOT_CA_PATH}/root/generate/internal

#Take a look
${VAULT} read ${ROOT_CA_PATH}/cert/ca
#OR curl -s http://localhost:8200/v1/${ROOT_CA_PATH}/ca/pem | openssl x509 -text
# Note the two different endpoints - cert/ca returns the cert in PEM format, ca/pem is SUPPOSED to, but the CLI doesn't do it right - I'm sure there's a nuanced reason for this.

${VAULT} write ${ROOT_CA_PATH}/config/urls issuing_certificates="http://localhost:8200/v1/${ROOT_CA_PATH}"
#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{ "issuing_certificates": "http://localhost:8200/v1/${ROOT_CA_PATH}" }' ${VAULT_ADDR}/v1/${ROOT_CA_PATH}/config/urls

#Create Intermediate CA
${VAULT} mount -path=${INTERMEDIATE_CA_PATH} -description="${INTERMEDIATE_CA_CN}" -max-lease-ttl=26280h pki
#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"type": "pki",   "description": "${INTERMEDIATE_CA_CN}", "config": { "max_lease_ttl":     "26280h"}}'  ${VAULT_ADDR}/v1/sys/mounts/${INTERMEDIATE_CA_PATH}

${VAULT} mounts
#OR curl -k -X GET -H "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/sys/mounts|jq .

# Generate CSR
${VAULT} write ${INTERMEDIATE_CA_PATH}/intermediate/generate/internal \
 common_name="${INTERMEDIATE_CA_CN}" \
 ttl=26280h \
 key_bits=4096 \
 exclude_cn_from_sans=true
#Make sure to copy CSR text into file (myca_intermediate_ca.csr for this example)

#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"common_name": "${INTERMEDIATE_CA_CN}", "ttl": "26280h", "key_bits": "4096", "exclude_cn_from_sans": "true"}' ${VAULT_ADDR}/v1/${INTERMEDIATE_CA_PATH}/intermediate/generate/internal | tee >(jq -r .data.csr > myca_intermediate_ca.csr)

${VAULT} write ${ROOT_CA_PATH}/root/sign-intermediate \
 csr=@myca_intermediate_ca.csr \
 common_name="${INTERMEDIATE_CA_CN}" \
 ttl=8760h
#Make sure to copy cert text into file (myca_intermediate_ca.crt for this example)

#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d @<(jq -n --arg a "$(<myca_intermediate_ca.csr)" '{"csr": $a, "common_name": "${INTERMEDIATE_CA_CN}", "ttl": "8760h", "key_bits": "4096"}') ${VAULT_ADDR}/v1/${ROOT_CA_PATH}/root/sign-intermediate | tee >(jq -r .data.certificate > myca_intermediate_ca.crt)

#That spits out the certificate... need to write it into place.
${VAULT} write ${INTERMEDIATE_CA_PATH}/intermediate/set-signed certificate=@myca_intermediate_ca.crt

#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d @<(jq -n --arg a "$(<myca_intermediate_ca.crt)" '{"certificate": $a}') ${VAULT_ADDR}/v1/${INTERMEDIATE_CA_PATH}/intermediate/set-signed

#Create role (template?) for certificates
${VAULT} write ${INTERMEDIATE_CA_PATH}/roles/web_server \
  key_bits=2048 \
  max_ttl=8760h \
  allow_any_name=true

#OR curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d '{"allow_any_name": "true", "allow_ip_sans": "true", "max_ttl": "8760h", "key_bits": "2048"}' ${VAULT_ADDR}/v1/${INTERMEDIATE_CA_PATH}/roles/web_server

#Issue cert - 30 days?
${VAULT} write ${INTERMEDIATE_CA_PATH}/issue/web_server \
  common_name='www.example.com' \
  ip_sans='1.2.3.4' \
  ttl=720h \
  format=pem

#OR
curl -H "X-Vault-Token: ${VAULT_TOKEN}"   -d '{ "common_name": "www.example.com" }' \
${VAULT_ADDR}/v1/${INTERMEDIATE_CA_PATH}/issue/web_server \
  | tee \
  >(jq -r .data.certificate > www.example.com.cert) \
  >(jq -r .data.private_key > www.example.com.pem) \
  >(jq -r .data.ca_chain[] > www.example.com-chained.pem)

#OR if you have a CSR from someone (haven't tested this)
curl -k -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" -d @<(jq -n --arg a "www.example.com" --arg b "$(<server.csr)" '{ common_name: $a, csr: $b }') ${VAULT_ADDR}/v1/${INTERMEDIATE_CA_PATH}/sign/example-dot-com \
  | tee \
  >(jq -r .data.certificate > www.example.com.cert) \
  >(jq -r .data.ca_chain[] > www.example.com-chained.pem)

